{
  "_args": [
    [
      {
        "raw": "@typescript-eslint/typescript-estree@4.15.1",
        "scope": "@typescript-eslint",
        "escapedName": "@typescript-eslint%2ftypescript-estree",
        "name": "@typescript-eslint/typescript-estree",
        "rawSpec": "4.15.1",
        "spec": "4.15.1",
        "type": "version"
      },
      "/home/bagas/Documents/2.February/MyLife_Web_1.0.0/node_modules/@typescript-eslint/experimental-utils"
    ]
  ],
  "_from": "@typescript-eslint/typescript-estree@4.15.1",
  "_hasShrinkwrap": false,
  "_id": "@typescript-eslint/typescript-estree@4.15.1",
  "_location": "/@typescript-eslint/typescript-estree",
  "_nodeVersion": "12.19.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/typescript-estree_4.15.1_1613415468452_0.5589163856011099"
  },
  "_npmUser": {
    "name": "jameshenry",
    "email": "npm@jameshenry.email"
  },
  "_npmVersion": "lerna/3.22.1/node@v12.19.1+x64 (darwin)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@typescript-eslint/typescript-estree@4.15.1",
    "scope": "@typescript-eslint",
    "escapedName": "@typescript-eslint%2ftypescript-estree",
    "name": "@typescript-eslint/typescript-estree",
    "rawSpec": "4.15.1",
    "spec": "4.15.1",
    "type": "version"
  },
  "_requiredBy": [
    "/@typescript-eslint/experimental-utils",
    "/@typescript-eslint/parser"
  ],
  "_resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-4.15.1.tgz",
  "_shasum": "fa9a9ff88b4a04d901ddbe5b248bc0a00cd610be",
  "_shrinkwrap": null,
  "_spec": "@typescript-eslint/typescript-estree@4.15.1",
  "_where": "/home/bagas/Documents/2.February/MyLife_Web_1.0.0/node_modules/@typescript-eslint/experimental-utils",
  "bugs": {
    "url": "https://github.com/typescript-eslint/typescript-eslint/issues"
  },
  "dependencies": {
    "@typescript-eslint/types": "4.15.1",
    "@typescript-eslint/visitor-keys": "4.15.1",
    "debug": "^4.1.1",
    "globby": "^11.0.1",
    "is-glob": "^4.0.1",
    "semver": "^7.3.2",
    "tsutils": "^3.17.1"
  },
  "description": "A parser that converts TypeScript source code into an ESTree compatible form",
  "devDependencies": {
    "@babel/code-frame": "^7.12.13",
    "@babel/parser": "^7.12.16",
    "@babel/types": "^7.12.13",
    "@types/babel__code-frame": "*",
    "@types/debug": "*",
    "@types/glob": "*",
    "@types/is-glob": "*",
    "@types/semver": "*",
    "@types/tmp": "*",
    "@typescript-eslint/shared-fixtures": "4.15.1",
    "glob": "*",
    "jest-specific-snapshot": "*",
    "make-dir": "*",
    "tmp": "^0.2.1",
    "typescript": "*"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-z8MN3CicTEumrWAEB2e2CcoZa3KP9+SMYLIA2aM49XW3cWIaiVSOAGq30ffR5XHxRirqE90fgLw3e6WmNx5uNw==",
    "shasum": "fa9a9ff88b4a04d901ddbe5b248bc0a00cd610be",
    "tarball": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-4.15.1.tgz",
    "fileCount": 88,
    "unpackedSize": 474001,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgKsQtCRA9TVsSAnZWagAAyJkP/3VDodISyu3X0k5Q84r7\ndg4w0U1btLP1wDTGZvNVRKyorBM77FBdmbVbx1MHQGx8xokdBDmVfJukbrJy\nIbQPwLwFokyMgHiN6pW/7CXx1qkbMyO7t9H+5+CZVdup6gKN+EtHd06mf/au\n+MXG64ayT+2EQ12NvxxwMIqz9YLYzCCfUFlRrDk4aGU2PZmzYE1t2DmM5MGn\naEzTyQhAsfB4y+JK6+MV8caJpgYiiSBMu8F9ZDUUl3pTI4xRh/XXH9ltU5vg\n5ZKQIGzcu3r6U/PpSfM/9yutyfDn0Xz4xhiGw1cGHWcVWvehp1z3gGlVMleZ\nbKa/sxQpcB3hsyKjNrZGNiXq2cRbXUyTSHjIA6GkvgiwvSVx34/Du0YKWBRP\n4dHaXWVE+PtqxvioMHzofE8oL+EqldYbyn/sONAMbvVtDenmlPlkqWxKwBdv\n3HPpnLKJF942GXGz3SlPQjgwQUi+q1nSwggLmcnGMpsFuGYytZAoPrTAkIbQ\nMEoHJWTMRKTFfzQnz0dEeUOzAkT6WGO4Bg2rzHPIISBmkBP3T+p/zhmNqGt/\n2OIrGuoI3XLcoMD+nVUp9EV/gdcdYjaWtugxzvwY1zKpuU41njtAqwNY9560\nbTCSIrEkWOpdpe5mo4WEx3VnMV+Nk+Wt9EPiQhkHeBo8pFTZOH0Lq9zMkStp\nP4nN\r\n=TCUJ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": "^10.12.0 || >=12.0.0"
  },
  "files": [
    "dist",
    "README.md",
    "LICENSE"
  ],
  "funding": {
    "type": "opencollective",
    "url": "https://opencollective.com/typescript-eslint"
  },
  "gitHead": "f9980c25fa383b4c6ec79f1f7635102103ee27e2",
  "homepage": "https://github.com/typescript-eslint/typescript-eslint#readme",
  "keywords": [
    "ast",
    "estree",
    "ecmascript",
    "javascript",
    "typescript",
    "parser",
    "syntax"
  ],
  "license": "BSD-2-Clause",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "jameshenry",
      "email": "npm@jameshenry.email"
    }
  ],
  "name": "@typescript-eslint/typescript-estree",
  "optionalDependencies": {},
  "peerDependenciesMeta": {
    "typescript": {
      "optional": true
    }
  },
  "readme": "<h1 align=\"center\">TypeScript ESTree</h1>\n\n<p align=\"center\">A parser that converts TypeScript source code into an <a href=\"https://github.com/estree/estree\">ESTree</a>-compatible form</p>\n\n<p align=\"center\">\n    <img src=\"https://github.com/typescript-eslint/typescript-eslint/workflows/CI/badge.svg\" alt=\"CI\" />\n    <a href=\"https://www.npmjs.com/package/@typescript-eslint/typescript-estree\"><img src=\"https://img.shields.io/npm/v/@typescript-eslint/typescript-estree.svg?style=flat-square\" alt=\"NPM Version\" /></a>\n    <a href=\"https://www.npmjs.com/package/@typescript-eslint/typescript-estree\"><img src=\"https://img.shields.io/npm/dm/@typescript-eslint/typescript-estree.svg?style=flat-square\" alt=\"NPM Downloads\" /></a>\n</p>\n\n## Getting Started\n\n**[You can find our Getting Started docs here](../../docs/getting-started/linting/README.md)**\n\n## About\n\nThis parser is somewhat generic and robust, and could be used to power any use-case which requires taking TypeScript source code and producing an ESTree-compatible AST.\n\nIn fact, it is already used within these hyper-popular open-source projects to power their TypeScript support:\n\n- [ESLint](https://eslint.org), the pluggable linting utility for JavaScript and JSX\n- [Prettier](https://prettier.io), an opinionated code formatter\n\n## Installation\n\n```sh\nyarn add -D @typescript-eslint/typescript-estree\n```\n\n## API\n\n### Parsing\n\n#### `parse(code, options)`\n\nParses the given string of code with the options provided and returns an ESTree-compatible AST.\n\n```ts\ninterface ParseOptions {\n  /**\n   * create a top-level comments array containing all comments\n   */\n  comment?: boolean;\n\n  /**\n   * An array of modules to turn explicit debugging on for.\n   * - 'typescript-eslint' is the same as setting the env var `DEBUG=typescript-eslint:*`\n   * - 'eslint' is the same as setting the env var `DEBUG=eslint:*`\n   * - 'typescript' is the same as setting `extendedDiagnostics: true` in your tsconfig compilerOptions\n   *\n   * For convenience, also supports a boolean:\n   * - true === ['typescript-eslint']\n   * - false === []\n   */\n  debugLevel?: boolean | ('typescript-eslint' | 'eslint' | 'typescript')[];\n\n  /**\n   * Cause the parser to error if it encounters an unknown AST node type (useful for testing).\n   * This case only usually occurs when TypeScript releases new features.\n   */\n  errorOnUnknownASTType?: boolean;\n\n  /**\n   * Absolute (or relative to `cwd`) path to the file being parsed.\n   */\n  filePath?: string;\n\n  /**\n   * Enable parsing of JSX.\n   * For more details, see https://www.typescriptlang.org/docs/handbook/jsx.html\n   *\n   * NOTE: this setting does not effect known file types (.js, .jsx, .ts, .tsx, .json) because the\n   * TypeScript compiler has its own internal handling for known file extensions.\n   *\n   * For the exact behavior, see https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser#parseroptionsecmafeaturesjsx\n   */\n  jsx?: boolean;\n\n  /**\n   * Controls whether the `loc` information to each node.\n   * The `loc` property is an object which contains the exact line/column the node starts/ends on.\n   * This is similar to the `range` property, except it is line/column relative.\n   */\n  loc?: boolean;\n\n  /*\n   * Allows overriding of function used for logging.\n   * When value is `false`, no logging will occur.\n   * When value is not provided, `console.log()` will be used.\n   */\n  loggerFn?: Function | false;\n\n  /**\n   * Controls whether the `range` property is included on AST nodes.\n   * The `range` property is a [number, number] which indicates the start/end index of the node in the file contents.\n   * This is similar to the `loc` property, except this is the absolute index.\n   */\n  range?: boolean;\n\n  /**\n   * Set to true to create a top-level array containing all tokens from the file.\n   */\n  tokens?: boolean;\n\n  /*\n   * The JSX AST changed the node type for string literals\n   * inside a JSX Element from `Literal` to `JSXText`.\n   * When value is `true`, these nodes will be parsed as type `JSXText`.\n   * When value is `false`, these nodes will be parsed as type `Literal`.\n   */\n  useJSXTextNode?: boolean;\n}\n\nconst PARSE_DEFAULT_OPTIONS: ParseOptions = {\n  comment: false,\n  errorOnUnknownASTType: false,\n  filePath: 'estree.ts', // or 'estree.tsx', if you pass jsx: true\n  jsx: false,\n  loc: false,\n  loggerFn: undefined,\n  range: false,\n  tokens: false,\n  useJSXTextNode: false,\n};\n\ndeclare function parse(\n  code: string,\n  options: ParseOptions = PARSE_DEFAULT_OPTIONS,\n): TSESTree.Program;\n```\n\nExample usage:\n\n```js\nimport { parse } from '@typescript-eslint/typescript-estree';\n\nconst code = `const hello: string = 'world';`;\nconst ast = parse(code, {\n  loc: true,\n  range: true,\n});\n```\n\n#### `parseAndGenerateServices(code, options)`\n\nParses the given string of code with the options provided and returns an ESTree-compatible AST. Accepts additional options which can be used to generate type information along with the AST.\n\n```ts\ninterface ParseAndGenerateServicesOptions extends ParseOptions {\n  /**\n   * Causes the parser to error if the TypeScript compiler returns any unexpected syntax/semantic errors.\n   */\n  errorOnTypeScriptSyntacticAndSemanticIssues?: boolean;\n\n  /**\n   * ***EXPERIMENTAL FLAG*** - Use this at your own risk.\n   *\n   * Causes TS to use the source files for referenced projects instead of the compiled .d.ts files.\n   * This feature is not yet optimized, and is likely to cause OOMs for medium to large projects.\n   *\n   * This flag REQUIRES at least TS v3.9, otherwise it does nothing.\n   *\n   * See: https://github.com/typescript-eslint/typescript-eslint/issues/2094\n   */\n  EXPERIMENTAL_useSourceOfProjectReferenceRedirect?: boolean;\n\n  /**\n   * When `project` is provided, this controls the non-standard file extensions which will be parsed.\n   * It accepts an array of file extensions, each preceded by a `.`.\n   */\n  extraFileExtensions?: string[];\n\n  /**\n   * Absolute (or relative to `tsconfigRootDir`) path to the file being parsed.\n   * When `project` is provided, this is required, as it is used to fetch the file from the TypeScript compiler's cache.\n   */\n  filePath?: string;\n\n  /**\n   * Allows the user to control whether or not two-way AST node maps are preserved\n   * during the AST conversion process.\n   *\n   * By default: the AST node maps are NOT preserved, unless `project` has been specified,\n   * in which case the maps are made available on the returned `parserServices`.\n   *\n   * NOTE: If `preserveNodeMaps` is explicitly set by the user, it will be respected,\n   * regardless of whether or not `project` is in use.\n   */\n  preserveNodeMaps?: boolean;\n\n  /**\n   * Absolute (or relative to `tsconfigRootDir`) paths to the tsconfig(s).\n   * If this is provided, type information will be returned.\n   */\n  project?: string | string[];\n\n  /**\n   * If you provide a glob (or globs) to the project option, you can use this option to ignore certain folders from\n   * being matched by the globs.\n   * This accepts an array of globs to ignore.\n   *\n   * By default, this is set to [\"/node_modules/\"]\n   */\n  projectFolderIgnoreList?: string[];\n\n  /**\n   * The absolute path to the root directory for all provided `project`s.\n   */\n  tsconfigRootDir?: string;\n\n  /**\n   ***************************************************************************************\n   * IT IS RECOMMENDED THAT YOU DO NOT USE THIS OPTION, AS IT CAUSES PERFORMANCE ISSUES. *\n   ***************************************************************************************\n   *\n   * When passed with `project`, this allows the parser to create a catch-all, default program.\n   * This means that if the parser encounters a file not included in any of the provided `project`s,\n   * it will not error, but will instead parse the file and its dependencies in a new program.\n   */\n  createDefaultProgram?: boolean;\n}\n\ninterface ParserServices {\n  program: ts.Program;\n  esTreeNodeToTSNodeMap: WeakMap<TSESTree.Node, ts.Node | ts.Token>;\n  tsNodeToESTreeNodeMap: WeakMap<ts.Node | ts.Token, TSESTree.Node>;\n  hasFullTypeInformation: boolean;\n}\n\ninterface ParseAndGenerateServicesResult<T extends TSESTreeOptions> {\n  ast: TSESTree.Program;\n  services: ParserServices;\n}\n\nconst PARSE_AND_GENERATE_SERVICES_DEFAULT_OPTIONS: ParseOptions = {\n  ...PARSE_DEFAULT_OPTIONS,\n  errorOnTypeScriptSyntacticAndSemanticIssues: false,\n  extraFileExtensions: [],\n  preserveNodeMaps: false, // or true, if you do not set this, but pass `project`\n  project: undefined,\n  projectFolderIgnoreList: ['/node_modules/'],\n  tsconfigRootDir: process.cwd(),\n};\n\ndeclare function parseAndGenerateServices(\n  code: string,\n  options: ParseOptions = PARSE_DEFAULT_OPTIONS,\n): ParseAndGenerateServicesResult;\n```\n\nExample usage:\n\n```js\nimport { parseAndGenerateServices } from '@typescript-eslint/typescript-estree';\n\nconst code = `const hello: string = 'world';`;\nconst { ast, services } = parseAndGenerateServices(code, {\n  filePath: '/some/path/to/file/foo.ts',\n  loc: true,\n  project: './tsconfig.json',\n  range: true,\n});\n```\n\n#### `parseWithNodeMaps(code, options)`\n\nParses the given string of code with the options provided and returns both the ESTree-compatible AST as well as the node maps.\nThis allows you to work with both ASTs without the overhead of types that may come with `parseAndGenerateServices`.\n\n```ts\ninterface ParseWithNodeMapsResult<T extends TSESTreeOptions> {\n  ast: TSESTree.Program;\n  esTreeNodeToTSNodeMap: ParserServices['esTreeNodeToTSNodeMap'];\n  tsNodeToESTreeNodeMap: ParserServices['tsNodeToESTreeNodeMap'];\n}\n\ndeclare function parseWithNodeMaps(\n  code: string,\n  options: ParseOptions = PARSE_DEFAULT_OPTIONS,\n): ParseWithNodeMapsResult;\n```\n\nExample usage:\n\n```js\nimport { parseWithNodeMaps } from '@typescript-eslint/typescript-estree';\n\nconst code = `const hello: string = 'world';`;\nconst { ast, esTreeNodeToTSNodeMap, tsNodeToESTreeNodeMap } = parseWithNodeMaps(\n  code,\n  {\n    loc: true,\n    range: true,\n  },\n);\n```\n\n### `TSESTree`, `AST_NODE_TYPES` and `AST_TOKEN_TYPES`\n\nTypes for the AST produced by the parse functions.\n\n- `TSESTree` is a namespace which contains object types representing all of the AST Nodes produced by the parser.\n- `AST_NODE_TYPES` is an enum which provides the values for every single AST node's `type` property.\n- `AST_TOKEN_TYPES` is an enum which provides the values for every single AST token's `type` property.\n\n## Supported TypeScript Version\n\nSee the [Supported TypeScript Version](../../README.md#supported-typescript-version) section in the project root.\n\nIf you use a non-supported version of TypeScript, the parser will log a warning to the console.\n\n**Please ensure that you are using a supported version before submitting any issues/bug reports.**\n\n## Reporting Issues\n\nPlease check the current list of open and known issues and ensure the issue has not been reported before. When creating a new issue provide as much information about your environment as possible. This includes:\n\n- TypeScript version\n- The `typescript-estree` version\n\n## AST Alignment Tests\n\nA couple of years after work on this parser began, the TypeScript Team at Microsoft began [officially supporting TypeScript parsing via Babel](https://blogs.msdn.microsoft.com/typescript/2018/08/27/typescript-and-babel-7/).\n\nI work closely with the TypeScript Team and we are gradually aligning the AST of this project with the one produced by Babel's parser. To that end, I have created a full test harness to compare the ASTs of the two projects which runs on every PR, please see [the code](https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/typescript-estree/tests/ast-alignment) for more details.\n\n## Debugging\n\nIf you encounter a bug with the parser that you want to investigate, you can turn on the debug logging via setting the environment variable: `DEBUG=typescript-eslint:*`.\nI.e. in this repo you can run: `DEBUG=typescript-eslint:* yarn lint`.\n\n## License\n\nTypeScript ESTree inherits from the the original TypeScript ESLint Parser license, as the majority of the work began there. It is licensed under a permissive BSD 2-clause license.\n\n## Contributing\n\n[See the contributing guide here](../../CONTRIBUTING.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/typescript-eslint/typescript-eslint.git",
    "directory": "packages/typescript-estree"
  },
  "scripts": {
    "build": "tsc -b tsconfig.build.json",
    "clean": "tsc -b tsconfig.build.json --clean",
    "format": "prettier --write \"./**/*.{ts,js,json,md}\" --ignore-path ../../.prettierignore",
    "lint": "eslint . --ext .js,.ts --ignore-path='../../.eslintignore'",
    "postbuild": "downlevel-dts dist _ts3.4/dist",
    "postclean": "rimraf dist",
    "test": "jest --coverage",
    "typecheck": "tsc -p tsconfig.json --noEmit"
  },
  "types": "dist/index.d.ts",
  "typesVersions": {
    "<3.8": {
      "*": [
        "_ts3.4/*"
      ]
    }
  },
  "version": "4.15.1"
}
