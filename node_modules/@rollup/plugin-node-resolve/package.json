{
  "_args": [
    [
      {
        "raw": "@rollup/plugin-node-resolve@^7.1.1",
        "scope": "@rollup",
        "escapedName": "@rollup%2fplugin-node-resolve",
        "name": "@rollup/plugin-node-resolve",
        "rawSpec": "^7.1.1",
        "spec": ">=7.1.1 <8.0.0",
        "type": "range"
      },
      "/home/bagas/Documents/2.February/MyLife_Web_1.0.0/node_modules/workbox-build"
    ]
  ],
  "_from": "@rollup/plugin-node-resolve@^7.1.1",
  "_hasShrinkwrap": false,
  "_id": "@rollup/plugin-node-resolve@7.1.3",
  "_location": "/@rollup/plugin-node-resolve",
  "_nodeVersion": "12.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/plugin-node-resolve_7.1.3_1586711595195_0.596995191498378"
  },
  "_npmUser": {
    "name": "shellscape",
    "email": "andrew@shellscape.org"
  },
  "_npmVersion": "6.14.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@rollup/plugin-node-resolve@^7.1.1",
    "scope": "@rollup",
    "escapedName": "@rollup%2fplugin-node-resolve",
    "name": "@rollup/plugin-node-resolve",
    "rawSpec": "^7.1.1",
    "spec": ">=7.1.1 <8.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/workbox-build"
  ],
  "_resolved": "https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-7.1.3.tgz",
  "_shasum": "80de384edfbd7bfc9101164910f86078151a3eca",
  "_shrinkwrap": null,
  "_spec": "@rollup/plugin-node-resolve@^7.1.1",
  "_where": "/home/bagas/Documents/2.February/MyLife_Web_1.0.0/node_modules/workbox-build",
  "author": {
    "name": "Rich Harris",
    "email": "richard.a.harris@gmail.com"
  },
  "ava": {
    "files": [
      "!**/fixtures/**",
      "!**/helpers/**",
      "!**/recipes/**",
      "!**/types.ts"
    ]
  },
  "bugs": {
    "url": "https://github.com/rollup/plugins/issues"
  },
  "dependencies": {
    "@rollup/pluginutils": "^3.0.8",
    "@types/resolve": "0.0.8",
    "builtin-modules": "^3.1.0",
    "is-module": "^1.0.0",
    "resolve": "^1.14.2"
  },
  "description": "Locate and bundle third-party dependencies in node_modules",
  "devDependencies": {
    "@babel/core": "^7.9.0",
    "@babel/preset-env": "^7.9.0",
    "@rollup/plugin-json": "^4.0.1",
    "es5-ext": "^0.10.53",
    "rollup": "^2.0.0",
    "rollup-plugin-babel": "^4.3.3",
    "rollup-plugin-commonjs": "^10.1.0",
    "source-map": "^0.7.3",
    "string-capitalize": "^1.0.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-RxtSL3XmdTAE2byxekYLnx+98kEUOrPHF/KRVjLH+DEIHy6kjIw7YINQzn+NXiH/NTrQLAwYs0GWB+csWygA9Q==",
    "shasum": "80de384edfbd7bfc9101164910f86078151a3eca",
    "tarball": "https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-7.1.3.tgz",
    "fileCount": 7,
    "unpackedSize": 54866,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJek0wrCRA9TVsSAnZWagAA55gP/1uPD4mlnP2xmKGiMRkC\nXaAvoUC7mKGvO46Bpr58bpBvMg5GsInkGlZmuIiM+Yrp6AGRBHNOQGHucRPI\n6fhEpmuBQnVmWWjZmVJW4ODTDtAOjFg42x5cU3wEXhRBynhQoUbPWO/2JS/7\nUsGIxpoXAasFkOrwcCgYKKIqpEYCCfBQK2aMP7zfb5uDTcYLC1AkM4XFL4bj\noi8AjpaqTErZc93jbPFcn89AIK/Jw2ARqFVTUcNxAMx2W5G3GLZmyvIbxHBQ\nNLtpimEMJ/VGn+cdWvzwjpl9DaGjJ7I+76dcG3TUTkmsqRaO/3Vc9Faojmgc\nqbJY2WS9VGhqht3xIZwYhCAYMvDwhKRdGUWFrGDsjurO48sHzkVLtwjPxuy7\nAejR1znQcdnIlfQF2woleEzITdJYJEEa4Jh2GEm0HZ0153jJKwN5Ps3nj7MM\nHkPFEQOvdEg+/LbTGzXqKwczt2RDHepfGDZ1PZTw/dXCdKCkO+QMWWPMurX2\nYAgUxzqw78Gq1sGnJHREpyic53FEekfue0LpCwrMyqwNXpsqdCwZk+KWjUwO\nQa34j7aeriYy79uBU43PfyA1z+kPVtdHo8hLPLCXyYiPGgYPZChW9pGwq5x8\nLxNk7uAdPeAJFmWlxm4VMqM68drKW5yqOMB7i7L5tLrlYDGXQd8CwCJ06K5J\nLDm6\r\n=F/eU\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 8.0.0"
  },
  "files": [
    "dist",
    "types",
    "README.md",
    "LICENSE"
  ],
  "homepage": "https://github.com/rollup/plugins/tree/master/packages/node-resolve/#readme",
  "keywords": [
    "rollup",
    "plugin",
    "es2015",
    "npm",
    "modules"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "guybedford",
      "email": "guybedford@gmail.com"
    },
    {
      "name": "lukastaegert",
      "email": "lukas.taegert@tngtech.com"
    },
    {
      "name": "rich_harris",
      "email": "richard.a.harris@gmail.com"
    },
    {
      "name": "shellscape",
      "email": "andrew@shellscape.org"
    }
  ],
  "module": "dist/index.es.js",
  "name": "@rollup/plugin-node-resolve",
  "optionalDependencies": {},
  "peerDependencies": {
    "rollup": "^1.20.0||^2.0.0"
  },
  "publishConfig": {
    "access": "public"
  },
  "readme": "[npm]: https://img.shields.io/npm/v/@rollup/plugin-node-resolve\n[npm-url]: https://www.npmjs.com/package/@rollup/plugin-node-resolve\n[size]: https://packagephobia.now.sh/badge?p=@rollup/plugin-node-resolve\n[size-url]: https://packagephobia.now.sh/result?p=@rollup/plugin-node-resolve\n\n[![npm][npm]][npm-url]\n[![size][size]][size-url]\n[![libera manifesto](https://img.shields.io/badge/libera-manifesto-lightgrey.svg)](https://liberamanifesto.com)\n\n# @rollup/plugin-node-resolve\n\nüç£ A Rollup plugin which locates modules using the [Node resolution algorithm](https://nodejs.org/api/modules.html#modules_all_together), for using third party modules in `node_modules`\n\n## Requirements\n\nThis plugin requires an [LTS](https://github.com/nodejs/Release) Node version (v8.0.0+) and Rollup v1.20.0+.\n\n## Install\n\nUsing npm:\n\n```console\nnpm install @rollup/plugin-node-resolve --save-dev\n```\n\n## Usage\n\nCreate a `rollup.config.js` [configuration file](https://www.rollupjs.org/guide/en/#configuration-files) and import the plugin:\n\n```js\nimport resolve from '@rollup/plugin-node-resolve';\n\nexport default {\n  input: 'src/index.js',\n  output: {\n    dir: 'output',\n    format: 'cjs'\n  },\n  plugins: [resolve()]\n};\n```\n\nThen call `rollup` either via the [CLI](https://www.rollupjs.org/guide/en/#command-line-reference) or the [API](https://www.rollupjs.org/guide/en/#javascript-api).\n\n## Options\n\n### `browser`\n\nType: `Boolean`<br>\nDefault: `false`\n\nIf `true`, instructs the plugin to use the `\"browser\"` property in `package.json` files to specify alternative files to load for bundling. This is useful when bundling for a browser environment. Alternatively, a value of `'browser'` can be added to the `mainFields` option. If `false`, any `\"browser\"` properties in package files will be ignored. This option takes precedence over `mainFields`.\n\n### `customResolveOptions`\n\nType: `Object`<br>\nDefault: `null`\n\nAn `Object` that specifies additional options that should be passed through to [`resolve`](https://www.npmjs.com/package/resolve).\n\n```\ncustomResolveOptions: {\n  moduleDirectory: 'js_modules'\n}\n```\n\n### `dedupe`\n\nType: `Array[...String]`<br>\nDefault: `[]`\n\nAn `Array` of modules names, which instructs the plugin to force resolving for the specified modules to the root `node_modules`. Helps to prevent bundling the same package multiple times if package is imported from dependencies.\n\n```js\ndedupe: ['my-package', '@namespace/my-package'];\n```\n\nThis will deduplicate bare imports such as:\n\n```js\nimport 'my-package';\nimport '@namespace/my-package';\n```\n\nAnd it will deduplicate deep imports such as:\n\n```js\nimport 'my-package/foo.js';\nimport '@namespace/my-package/bar.js';\n```\n\n### `extensions`\n\nType: `Array[...String]`<br>\nDefault: `['.mjs', '.js', '.json', '.node']`\n\nSpecifies the extensions of files that the plugin will operate on.\n\n### `jail`\n\nType: `String`<br>\nDefault: `'/'`\n\nLocks the module search within specified path (e.g. chroot). Modules defined outside this path will be marked as external.\n\n### `mainFields`\n\nType: `Array[...String]`<br>\nDefault: `['module', 'main']`<br>\nValid values: `['browser', 'jsnext', 'module', 'main']`\n\nSpecifies the properties to scan within a `package.json`, used to determine the bundle entry point. The order of property names is significant, as the first-found property is used as the resolved entry point. If the array contains `'browser'`, key/values specified in the `package.json` `browser` property will be used.\n\n### `only`\n\nDEPRECATED: use \"resolveOnly\" instead\n\n### `preferBuiltins`\n\nType: `Boolean`<br>\nDefault: `true`\n\nIf `true`, the plugin will prefer built-in modules (e.g. `fs`, `path`). If `false`, the plugin will look for locally installed modules of the same name.\n\n### `modulesOnly`\n\nType: `Boolean`<br>\nDefault: `false`\n\nIf `true`, inspect resolved files to assert that they are ES2015 modules.\n\n### `resolveOnly`\n\nType: `Array[...String|RegExp]`<br>\nDefault: `null`\n\nAn `Array` which instructs the plugin to limit module resolution to those whose names match patterns in the array. _Note: Modules not matching any patterns will be marked as external._\n\nExample: `resolveOnly: ['batman', /^@batcave\\/.*$/]`\n\n### `rootDir`\n\nType: `String`<br>\nDefault: `process.cwd()`\n\nSpecifies the root directory from which to resolve modules. Typically used when resolving entry-point imports, and when resolving deduplicated modules. Useful when executing rollup in a package of a mono-repository.\n\n```\n// Set the root directory to be the parent folder\nrootDir: path.join(process.cwd(), '..')\n```\n\n## Using with @rollup/plugin-commonjs\n\nSince most packages in your node_modules folder are probably legacy CommonJS rather than JavaScript modules, you may need to use [@rollup/plugin-commonjs](https://github.com/rollup/plugins/tree/master/packages/commonjs):\n\n```js\n// rollup.config.js\nimport resolve from '@rollup/plugin-node-resolve';\nimport commonjs from '@rollup/plugin-commonjs';\n\nexport default {\n  input: 'main.js',\n  output: {\n    file: 'bundle.js',\n    format: 'iife',\n    name: 'MyModule'\n  },\n  plugins: [resolve(), commonjs()]\n};\n```\n\n## Resolving Built-Ins (like `fs`)\n\nThis plugin won't resolve any builtins (e.g. `fs`). If you need to resolve builtins you can install local modules and set `preferBuiltins` to `false`, or install a plugin like [rollup-plugin-node-polyfills](https://github.com/ionic-team/rollup-plugin-node-polyfills) which provides stubbed versions of these methods.\n\nIf you want to silence warnings about builtins, you can add the list of builtins to the `externals` option; like so:\n\n```js\nimport resolve from '@rollup/plugin-node-resolve';\nimport builtins from 'builtin-modules'\nexport default ({\n  input: ...,\n  plugins: [resolve()],\n  external: builtins,\n  output: ...\n})\n```\n\n## Meta\n\n[CONTRIBUTING](/.github/CONTRIBUTING.md)\n\n[LICENSE (MIT)](/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rollup/plugins.git"
  },
  "scripts": {
    "build": "rollup -c",
    "ci:coverage": "nyc pnpm run test && nyc report --reporter=text-lcov > coverage.lcov",
    "ci:lint": "pnpm run build && pnpm run lint",
    "ci:lint:commits": "commitlint --from=${CIRCLE_BRANCH} --to=${CIRCLE_SHA1}",
    "ci:test": "pnpm run test -- --verbose && pnpm run test:ts",
    "lint": "pnpm run lint:js && pnpm run lint:docs && pnpm run lint:package",
    "lint:docs": "prettier --single-quote --write README.md",
    "lint:js": "eslint --fix --cache src test types --ext .js,.ts",
    "lint:package": "prettier --write package.json --plugin=prettier-plugin-package",
    "prebuild": "del-cli dist",
    "prepare": "pnpm run build",
    "prepublishOnly": "pnpm run lint && pnpm run test && pnpm run test:ts",
    "pretest": "pnpm run build",
    "test": "ava",
    "test:ts": "tsc types/index.d.ts test/types.ts --noEmit"
  },
  "types": "types/index.d.ts",
  "version": "7.1.3"
}
