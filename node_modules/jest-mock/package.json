{
  "_args": [
    [
      {
        "raw": "jest-mock@^26.6.2",
        "scope": null,
        "escapedName": "jest-mock",
        "name": "jest-mock",
        "rawSpec": "^26.6.2",
        "spec": ">=26.6.2 <27.0.0",
        "type": "range"
      },
      "/home/bagas/Documents/2.February/MyLife_Web_1.0.0/node_modules/@jest/environment"
    ]
  ],
  "_from": "jest-mock@^26.6.2",
  "_hasShrinkwrap": false,
  "_id": "jest-mock@26.6.2",
  "_location": "/jest-mock",
  "_nodeVersion": "14.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jest-mock_26.6.2_1604321481507_0.7088325288464099"
  },
  "_npmUser": {
    "name": "simenb",
    "email": "sbekkhus91@gmail.com"
  },
  "_npmVersion": "lerna/3.22.1/node@v14.15.0+x64 (darwin)",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jest-mock@^26.6.2",
    "scope": null,
    "escapedName": "jest-mock",
    "name": "jest-mock",
    "rawSpec": "^26.6.2",
    "spec": ">=26.6.2 <27.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@jest/environment",
    "/@jest/fake-timers",
    "/jest-environment-jsdom",
    "/jest-environment-node",
    "/jest-runtime"
  ],
  "_resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-26.6.2.tgz",
  "_shasum": "d6cb712b041ed47fe0d9b6fc3474bc6543feb302",
  "_shrinkwrap": null,
  "_spec": "jest-mock@^26.6.2",
  "_where": "/home/bagas/Documents/2.February/MyLife_Web_1.0.0/node_modules/@jest/environment",
  "bugs": {
    "url": "https://github.com/facebook/jest/issues"
  },
  "dependencies": {
    "@jest/types": "^26.6.2",
    "@types/node": "*"
  },
  "description": "## API",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-YyFjePHHp1LzpzYcmgqkJ0nm0gg/lJx2aZFzFy1S6eUqNjXsOqTK10zNRff2dNfssgokjkG65OlWNcIlgd3zew==",
    "shasum": "d6cb712b041ed47fe0d9b6fc3474bc6543feb302",
    "tarball": "https://registry.npmjs.org/jest-mock/-/jest-mock-26.6.2.tgz",
    "fileCount": 5,
    "unpackedSize": 35396,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfoADJCRA9TVsSAnZWagAAE18P/jk3RtwaTmgxkqSSE4BO\nnaLar+oHcHaE9MAA7Q7escnl3oAJwEMmJo1UAiCfsq+rMGhHx0rvetHVdtcH\n3m8tziwco39U3WzLq09j1JndFUSN6C3z5g6R1uxHqWdBS7+IolRsaW0/U1Nb\nFevHms5/bUXhGa37Tk1qmuIaB03kjxS1+7SmFfMO3II7C+JrF5mDepeYy7jW\nZBRBB1OeRJY0NjB2ozxbr0NTN5nAr/hla7SgbC0ox66VZesuTUSLwTRrQp9E\n5Ntbl4F4zDoOxyANwcvDPoRwLL8kxggK2x7DVe1fFg3Q6T2qLkf8aBp7t8Tv\nrxo5cnF8UWVH6SDn3YDXGB0lYRjQ1/8quVAhtBnCqdbzSt6rDKds1Ry7MMCW\niJLgwWW/bpmOi4UZpXW/qk0z2aeOjikW0MzTFAx0os/OzMUtovluGUtZei0Q\ng1VoTW9mFf9jzailRh3VuTBzXfR5FHvcKAiOMIuSfB2wctjgEAWOoi4SHnrb\nDDBxZFJ9XubSwb31MxKTkCfgmI+559xQLXma6Ehc9ou4OV5lWCt2u0fGSRSY\nfdvK0tWG7J3oPUMa3iBY8BBajpr8EjEMVZkV/aOVJH6prG8U52TqUPE/7rLm\n87kzAN7CW1zWXZaKpZ7DifRHDw9K5sZkajz7y53mYE5kmAPLAeprUoe3QJVb\n7AFy\r\n=GmM5\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 10.14.2"
  },
  "gitHead": "4c46930615602cbf983fb7e8e82884c282a624d5",
  "homepage": "https://github.com/facebook/jest#readme",
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "scotthovestadt",
      "email": "scott.hovestadt@gmail.com"
    },
    {
      "name": "rubennorte",
      "email": "rubennorte@gmail.com"
    },
    {
      "name": "simenb",
      "email": "sbekkhus91@gmail.com"
    },
    {
      "name": "cpojer",
      "email": "christoph.pojer@gmail.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "aaronabramov",
      "email": "aaron@abramov.io"
    },
    {
      "name": "davidzilburg",
      "email": "davidzilburg@gmail.com"
    }
  ],
  "name": "jest-mock",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# jest-mock\n\n## API\n\n### `constructor(global)`\n\nCreates a new module mocker that generates mocks as if they were created in an environment with the given global object.\n\n### `generateFromMetadata(metadata)`\n\nGenerates a mock based on the given metadata (Metadata for the mock in the schema returned by the getMetadata method of this module). Mocks treat functions specially, and all mock functions have additional members, described in the documentation for `fn` in this module.\n\nOne important note: function prototypes are handled specially by this mocking framework. For functions with prototypes, when called as a constructor, the mock will install mocked function members on the instance. This allows different instances of the same constructor to have different values for its mocks member and its return values.\n\n### `getMetadata(component)`\n\nInspects the argument and returns its schema in the following recursive format:\n\n```\n{\n  type: ...\n  members: {}\n}\n```\n\nWhere type is one of `array`, `object`, `function`, or `ref`, and members is an optional dictionary where the keys are member names and the values are metadata objects. Function prototypes are defined by defining metadata for the `member.prototype` of the function. The type of a function prototype should always be `object`. For instance, a class might be defined like this:\n\n```js\nconst classDef = {\n  type: 'function',\n  members: {\n    staticMethod: {type: 'function'},\n    prototype: {\n      type: 'object',\n      members: {\n        instanceMethod: {type: 'function'},\n      },\n    },\n  },\n};\n```\n\nMetadata may also contain references to other objects defined within the same metadata object. The metadata for the referent must be marked with `refID` key and an arbitrary value. The referrer must be marked with a `ref` key that has the same value as object with refID that it refers to. For instance, this metadata blob:\n\n```js\nconst refID = {\n  type: 'object',\n  refID: 1,\n  members: {\n    self: {ref: 1},\n  },\n};\n```\n\ndefines an object with a slot named `self` that refers back to the object.\n\n### `fn`\n\nGenerates a stand-alone function with members that help drive unit tests or confirm expectations. Specifically, functions returned by this method have the following members:\n\n##### `.mock`\n\nAn object with three members, `calls`, `instances` and `invocationCallOrder`, which are all lists. The items in the `calls` list are the arguments with which the function was called. The \"instances\" list stores the value of 'this' for each call to the function. This is useful for retrieving instances from a constructor. The `invocationCallOrder` lists the order in which the mock was called in relation to all mock calls, starting at 1.\n\n##### `.mockReturnValueOnce(value)`\n\nPushes the given value onto a FIFO queue of return values for the function.\n\n##### `.mockReturnValue(value)`\n\nSets the default return value for the function.\n\n##### `.mockImplementationOnce(function)`\n\nPushes the given mock implementation onto a FIFO queue of mock implementations for the function.\n\n##### `.mockImplementation(function)`\n\nSets the default mock implementation for the function.\n\n##### `.mockReturnThis()`\n\nSyntactic sugar for .mockImplementation(function() {return this;})\n\nIn case both `mockImplementationOnce()/mockImplementation()` and `mockReturnValueOnce()/mockReturnValue()` are called. The priority of which to use is based on what is the last call:\n\n- if the last call is mockReturnValueOnce() or mockReturnValue(), use the specific return value or default return value. If specific return values are used up or no default return value is set, fall back to try mockImplementation();\n- if the last call is mockImplementationOnce() or mockImplementation(), run the specific implementation and return the result or run default implementation and return the result.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/jest.git",
    "directory": "packages/jest-mock"
  },
  "types": "build/index.d.ts",
  "version": "26.6.2"
}
